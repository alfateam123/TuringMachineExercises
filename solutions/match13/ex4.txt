#exercise 4 match 13
#{1, 2, 3, 4, 5, 6, 7, F, C, R}
#assert tape.count(item)<=4
(0, 1..7FCR, 10, 1..7FCR, >)
(1[01234], 2..7FCR, 1[01234], 2..7FCR, >)
(1[012], 1, 1[123], 1, >)
(1[3], 1, goF, 1, >)
(1[01234], -, goFirst2, -, <)
(2[01234], 134567FCR, 2[01234], 134567FCR, >)
(2[012], 2, 2[123], 2, >)
(2[3], 2, goF, 2, >)
(2[01234], -, goFirst3, -, <)
(3[01234], 124567FCR, 2[01234], 124567FCR, >)
(3[012], 3, 3[123], 3, >)
(3[3], 3, goF, 3, >)
(3[01234], -, goFirst4, -, <)
(4[01234], 123567FCR, 4[01234], 123567FCR, >)
(4[012], 4, 4[123], 4, >)
(4[3], 4, goF, 4, >)
(4[01234], -, goFirst5, -, <)
(5[01234], 123467FCR, 5[01234], 123467FCR, >)
(5[012], 5, 5[123], 5, >)
(5[3], 5, goF, 5, >)
(5[01234], -, goFirst6, -, <)
(6[01234], 123457FCR, 6[01234], 123457FCR, >)
(6[012], 6, 6[123], 6, >)
(6[3], 2, goF, 2, >)
(6[01234], -, goFirst7, -, <)
(7[01234], 123456FCR, 7[01234], 123456FCR, >)
(7[012], 7, 7[123], 7, >)
(7[3], 7, goF, 7, >)
(7[01234], -, goFirstF, -, <)
(F[01234], 1234567CR, F[01234], 1234567CR, >)
(F[012], F, F[123], F, >)
(F[3], F, goF, F, >)
(F[01234], -, goFirstC, -, <)
(C[01234], 123456FR, C[01234], 123456FR, >)
(C[012], C, C[123], C, >)
(C[3], C, goF, C, >)
(C[01234], -, goFirstR, -, <)
(R[01234], 123456FC, R[01234], 123456FC, >)
(R[012], R, R[123], R, >)
(R[3], R, goF, R, >)
(R[01234], -, goFirstX, -, <)
(X0, 1..7FCR, goFirstX, -, -)

(goFirst[1..7FCRX], 1..7FCR, goFirst[1..7FCRX], 1..7FCR, <)
(goFirst[1..7FCR], -, [2..7FCRX]0, -, >)
(goFirstX, -, cancelW, -, >)

(goF, 1..7FCR, goF, 1..7FCR, >)
(goF, -, cancelF, -, <)
(cancel[FW], 1..7FCR, cancel[FW], -, [<>])
(cancelF, -, fail1, B, >)
(fail1, -, fail2, A, >)
(fail2, -, fail3, R, >)
(fail3, -, FAIL, o, -)
(cancelW, -, win1, o, >)
(win1, -, WIN, K, -)
